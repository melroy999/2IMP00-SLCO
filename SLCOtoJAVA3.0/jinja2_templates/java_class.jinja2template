// Representation of the SLCO class {{model.name}}
private static class {{model.name}} implements SLCO_Class {
    {% if model.state_machine_declarations | length > 0 %}
    // The threads
    {% for s in model.state_machine_declarations %}
    {{s}}
    {% endfor %}

    {% endif %}
    {% if model.variable_declarations | length > 0 %}
    // Global variables
    {% for s in model.variable_declarations %}
    {{s}}
    {% endfor %}

    {% endif %}
    {% for sm in model.state_machines %}
    {{sm | render_state_machine | indent(4, False)}}

    {% endfor %}
    {{model.name}}({{model.constructor_variable_list}}) {
        {% if model.has_class_variables %}
        // Create a lock manager.
        LockManager lockManager = new LockManager({{model.number_of_locks}});

        {% endif %}
        {% if model.variable_instantiations | length > 0 %}
        // Instantiate global variables
        {% for s in model.variable_instantiations %}
        {{s}}
        {% endfor %}

        {% endif %}
        {% if model.state_machine_instantiations | length > 0 %}
        // Instantiate state machines
        {% for s in model.state_machine_instantiations %}
        {{s}}
        {% endfor %}
        {% endif %}
    }

    // Start all threads
    public void startThreads() {
        {% for sm in model.state_machines %}
        T_{{sm.name}}.start();
        {% endfor %}
    }

    // Join all threads
    public void joinThreads() {
        while (true) {
            try {
                {% for sm in model.state_machines %}
                T_{{sm.name}}.join();
                {% endfor %}
                break;
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
        }
    }
}