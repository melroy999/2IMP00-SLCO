import java.util.Random;
import java.util.concurrent.locks.ReentrantLock;
import java.util.Arrays;

// Main class
// @SuppressWarnings({"NonAtomicOperationOnVolatileField", "FieldCanBeLocal", "InnerClassMayBeStatic", "DuplicatedCode", "MismatchedReadAndWriteOfArray", "unused", "SpellCheckingInspection"})
public class {{model.name}} {
    // The objects in the model
    private final SLCO_Class[] objects;

    {% if add_counter %}
    // Upperbound for transition counter
    private static final long COUNTER_BOUND = 10000000L;

    {% endif %}
    // Lock class to handle locks of global variables
    private static class LockManager {
        // The locks
        private final ReentrantLock[] locks;

        LockManager(int noVariables) {
            locks = new ReentrantLock[noVariables];
            Arrays.fill(locks, new ReentrantLock(true));
        }

        // Lock method
        void lock(int[] locking_phase) {
            Arrays.sort(locking_phase);
            for (int lock_id : locking_phase) {
                locks[lock_id].lock();
            }
        }

        // Unlock method
        void unlock(int[]... locking_phases) {
            for(int[] locking_phase : locking_phases) {
                for (int lock_id : locking_phase) {
                    locks[lock_id].unlock();
                }
            }
        }
    }

    // Template for SLCO classes
    interface SLCO_Class {
        void startThreads();
        void joinThreads();
    }

    {% for c in model.classes %}
    {{c | render_class | indent(4, False)}}

    {% endfor %}
    {{model.name}}() {
        //Instantiate the objects
        objects = new SLCO_Class[] {
            {% for c in model.classes %}
            {% for o in c.objects %}
            new {{c.name}}({{o.assignments | get_variable_instantiation_list(c.variables)}}),
            {% endfor %}
            {% endfor %}
        };
    }

    // Start all threads
    private void startThreads() {
        for(SLCO_Class o : objects) {
            o.startThreads();
        }
    }

    // Join all threads
    private void joinThreads() {
        for(SLCO_Class o : objects) {
            o.joinThreads();
        }
    }

    // Run application
    public static void main(String[] args) {
        {{model.name}} ap = new {{model.name}}();
        ap.startThreads();
        ap.joinThreads();
    }
}