import java.util.Random;
import java.util.concurrent.locks.ReentrantLock;
import java.util.Arrays;

// Main class
@SuppressWarnings({"NonAtomicOperationOnVolatileField", "SpellCheckingInspection"})
public class {{model.name}} {
    // The objects in the model
    private final SLCO_Class[] objects;

    {% if add_counter %}
    // Upperbound for transition counter
    private static final long COUNTER_BOUND = 10000000L;

    {% endif %}
    // Lock class to handle locks of global variables
    private static class LockManager {
        // The locks
        private final ReentrantLock[] locks;

        LockManager(int noVariables) {
            locks = new ReentrantLock[noVariables];
            for(int i = 0; i < locks.length; i++) {
                locks[i] = new ReentrantLock(true);
            }
        }

        // Lock method
        void lock(int[] lock_ids, int start, int end) {
            int i = start;
            Arrays.sort(lock_ids, start, end);
            for (; i < end; i++) {
                locks[lock_ids[i]].lock();
            }
        }

        // Unlock method
        void unlock(int[] lock_ids, int end) {
            for (int i = 0; i < end; i++) {
                locks[lock_ids[i]].unlock();
            }
        }

        // Unlock method during exceptions
        void exception_unlock() {
            System.err.println("Exception encountered. Releasing all locks currently owned by " + Thread.currentThread().getName() + ".");
            for(ReentrantLock lock: locks) {
                while(lock.isHeldByCurrentThread()) {
                    lock.unlock();
                }
            }
        }
    }

    // Template for SLCO classes
    interface SLCO_Class {
        void startThreads();
        void joinThreads();
    }

    {% for c in model.classes %}
    {{c | render_class | indent(4, False)}}

    {% endfor %}
    {{model.name}}() {
        //Instantiate the objects
        objects = new SLCO_Class[] {
            {% for c in model.classes %}
            {% for o in c.objects %}
            {% if c.variables | length < 2 %}
            new {{c.name}}({{o.assignments | get_variable_instantiation_list(c.variables, False)}}),
            {% else %}
            new {{c.name}}(
                {{o.assignments | get_variable_instantiation_list(c.variables, True) | indent(16, False)}}
            ),
            {% endif %}
            {% endfor %}
            {% endfor %}
        };
    }

    // Start all threads
    private void startThreads() {
        for(SLCO_Class o : objects) {
            o.startThreads();
        }
    }

    // Join all threads
    private void joinThreads() {
        for(SLCO_Class o : objects) {
            o.joinThreads();
        }
    }

    // Run application
    public static void main(String[] args) {
        {{model.name}} ap = new {{model.name}}();
        ap.startThreads();
        ap.joinThreads();
    }
}